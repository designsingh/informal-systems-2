@use 'sass:map';

@import url("https://fonts.googleapis.com/css2?family=Glegoo:wght@400;700&family=Inter:wght@400;500&display=swap");

$color--accent: #2f87a5;
$color--accent--burgundy: #ab534d;
$color--accent--purple: #a37aeb;
$color--accent--magenta: #e071dc;
$color--accent--magentaDarkened: #873385;
$color--accent--yellow: #ffb756;
$color--foreground: #0b2d7c;
$color--foreground--faded: rgba($color--foreground, 0.6);
$color--background: white;
$color--background--faded: rgba($color--foreground, 0.1);

$colorPalette: (
    "accent": #2f87a5,
    "burgundy": #ab534d,
    "purple": #a37aeb,
    "teal": #2f87a5,
    "magenta": #e071dc,
    "magentaDarkened": #873385,
    "yellow": #ffb756,
    "foreground": #0b2d7c,
    "background": white,
);
$spotColors: (
    "foreground--faded": ".u-color--foreground--300",
    "background--faded": ".u-color--background--100",
);
$variants: (
    "base": 400,
    "lightened": (
        100: 0.1,
        200: 0.3,
        300: 0.6,
    ),
    "darkened": (
        500: 0.1,
        600: 0.3,
        700: 0.6,
    ),
);

$breakpointDefinitions: (
    xLarge: (
        min-width: 1280px,
        grid-width: 1170px,
    ),
    large: (
        min-width: 1024px,
        grid-width: 960px,
    ),
);

$borderRadii: (
    "normal": 8px,
    "large": 16px,
    "xlarge": 24px,
    "circle": 1000px,
);

$borderStyles: (
    'hairline': 1px solid rgba($color--foreground, 0.1),
    'thick': 4px solid rgba($color--foreground, 0.1),
);

$border--hairline: 1px solid rgba($color--foreground, 0.1);
$border--thick: 4px solid rgba($color--foreground, 0.1);

$borderRadius--normal: 8px;
$borderRadius--large: 16px;
$borderRadius--xlarge: 24px;

$boxShadowStyles: (
    "normal": 2px 2px 4px 0 rgba(black, 0.2),
    "inset": 2px 2px 4px 0 rgba(black, 0.2) inset,
);
$boxShadow--normal: 2px 2px 4px 0 rgba(black, 0.2);
$boxShadow--inset: 2px 2px 4px 0 rgba(black, 0.2) inset;

$fontFamily--body: Inter, sans-serif;
$fontFamily--display: Glegoo, sans-serif;

$fontWeight--body--normal: 400;
$fontWeight--body--bold: 500;
$fontWeight--display: 700;

$gridSizes: (
    "xtight": calc(var(--gridUnit) * 0.25),
    "tight": calc(var(--gridUnit) * 0.5),
    "normal": var(--gridUnit),
    "loose": calc(var(--gridUnit) * 2),
    "xloose": calc(var(--gridUnit) * 4),
);

$heading--decorativeUnderlineWidth: 70px;

$textShadow--lightOnDark: 1px 1px 3px rgba(black, 0.6);

$whiteSpace--xtight: calc(var(--gridUnit) * 0.25);
$whiteSpace--tight: calc(var(--gridUnit) * 0.5);
$whiteSpace--normal: var(--gridUnit);
$whiteSpace--loose: calc(var(--gridUnit) * 2);
$whiteSpace--xloose: calc(var(--gridUnit) * 4);

@mixin responsiveStylesFor($breakpointName) {
    $breakpointDefinition: map-get($breakpointDefinitions, $breakpointName);
    $minWidth: map-get($breakpointDefinition, "min-width");

    @media screen and (min-width: $minWidth) {
        @content;
    }
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-size: inherit;
    line-height: 1.5em;
    list-style-type: none;
    text-decoration: none;
    color: unset;
}
:root {
    --gridUnit: 30px;

    --fontSize--small: 16px;
    --fontSize--normal: 24px;
    --fontSize--large: 40px;
    --fontSize--xLarge: 80px;

    --lineHeight--small: 1.5em;
    --lineHeight--normal: 1.5em;
    --lineHeight--large: 1.5em;
    --lineHeight--xLarge: 1em;

    --avatarSize--normal: 60px;
    --avatarSize--large: 120px;

    background: $color--background;
    color: $color--foreground;
    font-family: $fontFamily--body;
    font-size: var(--fontSize--normal);
    line-height: var(--lineHeight--normal);
    padding-bottom: $whiteSpace--xloose;
    scroll-padding-top: 10vh;
}
.avatar,
.avatarSpacer {
    align-items: center;
    border-radius: 1000px;
    display: flex;
    height: var(--avatarSize, --avatarSize--normal);
    justify-content: center;
    width: var(--avatarSize, --avatarSize--normal);
}
.avatar {
    background-color: $color--accent;
    box-shadow: $boxShadow--inset;
    color: white;
    text-shadow: $textShadow--lightOnDark;
}
.avatar--large {
    height: var(--avatarSize--large);
    width: var(--avatarSize--large);
}
.avatarSpacer {
    font-size: var(--fontSize--large);
}
.avatar--placeholder {
    background-color: $color--foreground;
}
.avatarList {
    display: flex;
    justify-content: space-between;
    align-items: center;
}
.avatarList--large {
    --avatarSize: var(--avatarSize--large);
}
@keyframes bgBubblePulsate {
    from {
        opacity: 0.2;
    }
    to {
        opacity: 0.6;
    }
}
@keyframes bgBubbleRotate {
    from {
        transform: scale(2) rotate(0) translate(1%, 1%);
    }
    to {
        transform: scale(2) rotate(359deg) translate(1%, 1%);
    }
}
.bgBubbles {
    height: 100vh;
    left: 0;
    position: fixed;
    top: 0;
    width: 100vw;
    z-index: -1;
}
.bgBubble {
    --animation-duration: 4s;

    animation-direction: alternate;
    animation-duration: var(--animation-duration), calc(var(--animation-duration) * 2);
    animation-iteration-count: infinite;
    animation-name: bgBubblePulsate, bgBubbleRotate;
    animation-timing-function: ease;
    border-radius: 100vw;
    height: 700px;
    position: fixed;
    width: 700px;
}
.bgBubble--a {
    --animation-duration: 4s;

    left: -20vw;
    top: -20vh;
}
.bgBubble--b {
    --animation-duration: 6s;

    right: -5vw;
    top: -40vh;
}
.bgBubble--c {
    --animation-duration: 5s;

    right: -30vw;
    bottom: -20vh;
}
.bgOrbits {
    background-repeat: no-repeat;
    background-position: top right;
}
.button {
    border: none;
    cursor: pointer;
    display: inline-block;
    font-family: $fontFamily--display;
    font-weight: $fontWeight--display;
    padding: $whiteSpace--tight $whiteSpace--normal;
    white-space: nowrap;
}
[class*="button--"] {
    @extend .button;
}
.button--primary {
    background-color: $color--foreground;
    color: white;
    font-size: var(--fontSize--small);

    .highContrast & {
        background-color: white;
        color: $color--foreground;
    }
}
.button--secondary {
    background-color: transparent;
    font-size: var(--fontSize--normal);
    text-decoration: underline;
}
.formField {
    @extend .u-rowGap--xtight;
    cursor: pointer;
    width: 50%;

    .siteFooter & {
        width: 100%;
    }
}
.formField-label {
    font-size: var(--fontSize--small);
    font-weight: bold;
    white-space: nowrap;
}
.grid {
    margin: 0 auto;

    $largeBreakpointDefinition: map-get($breakpointDefinitions, "large");
    $xLargeBreakpointDefinition: map-get($breakpointDefinitions, "xLarge");

    @include responsiveStylesFor("large") {
        width: map-get($largeBreakpointDefinition, "grid-width");
    }

    @include responsiveStylesFor("xLarge") {
        width: map-get($xLargeBreakpointDefinition, "grid-width");
    }
}
.grid-container {
    & + & {
        margin-top: $whiteSpace--loose;
    }
}
.heading {
    font-family: $fontFamily--display;
    font-weight: $fontWeight--display;
    width: 100%;
}
[class*="heading--"] {
    @extend .heading;
}
.heading--1 {
    font-size: var(--fontSize--xLarge);
    line-height: var(--lineHeight--xLarge);
}
.heading--2 {
    font-size: var(--fontSize--large);
    line-height: var(--lineHeight--large);
}
.heading--3 {
    font-size: var(--fontSize--normal);
    line-height: var(--lineHeight--normal);
    font-family: $fontFamily--display;
    font-weight: $fontWeight--display;
}
.heading--4 {
    font-family: $fontFamily--body;
    font-weight: $fontWeight--body--bold;
}
.highContrast {
    @extend .u-backgroundColor--foreground;
    @extend .u-borderRadius--xlarge;
    border-radius: $borderRadius--xlarge;
    color: white;
}
[class*="horizontalRule"] {
    background-color: transparent;
    border-width: 0;
    border-bottom: $border--hairline;
    border-color: $color--foreground;
    border-style: solid;
}
.horizontalRule--hairline {
    border-color: $color--background--faded;
}
.iconifiedMetaData {
    display: flex;
    color: $color--foreground--faded;
    column-gap: $whiteSpace--normal;
}
.iconifiedMetaData-labelText {
    display: none;
}
.iconifiedMetaData-labelValuePair {
    display: flex;
    column-gap: $whiteSpace--tight;
}
.input {
    border: $border--hairline;
    border-color: $color--foreground;
    font-size: var(--fontSize--small);
    padding: $whiteSpace--tight $whiteSpace--normal;
    width: 100%;

    &::placeholder {
        color: $color--foreground--faded;
        position: relative;
    }

    .highContrast & {
        border-color: white;
        background-color: transparent;
        color: white;

        &::placeholder {
            color: rgba(white, 0.6);
        }
    }
}
.link {
    color: $color--accent;
    font-weight: bold;

    &:hover {
        text-decoration: underline;
    }
}
.link--discreet {
    color: $color--foreground;

    &:hover {
        color: $color--accent;
        text-decoration: none;
    }
}
[class*="logo--"] {
    // background-image set in _layouts/default.html
    background-size: contain;
    background-repeat: no-repeat;
    display: block;
    font-size: 0;
}
.logo--footer {
    height: 68px;
    width: 170px;
    margin-top: calc(#{$whiteSpace--tight} * -1);
}
.logo--header {
    height: 48px;
    width: 120px;
}
.lowContrast {
    border-radius: $borderRadius--xlarge;
}
[class*="lowContrast--"] {
    @extend .lowContrast;
}
.lowContrast--accent {
    background-color: rgba($color--accent, 0.1);
}
.lowContrast--purple {
    background-color: rgba($color--accent--purple, 0.1);
}
.lowContrast--yellow {
    background-color: rgba($color--accent--yellow, 0.1);
}
.photo {
    display: inline-block;
    width: 100%;
}
.pill {
    background-color: $color--background--faded;
    border-radius: 1000px;
    color: $color--foreground--faded;
    display: inline-block;
    font-size: var(--fontSize--small);
    padding: 0 $whiteSpace--tight;
    vertical-align: middle;
}
.post {
    a:not([class]) {
        @extend .link;
    }
    ol:not([class]),
    ul:not([class]) {
        @extend .u-rowGap, .u-rowGap--tight;
        padding-left: $whiteSpace--xloose;
    }
    li:not([class]) {
        position: relative;

        &::before {
            color: $color--accent;
            content: "\f178";
            font-family: "Font Awesome 5 Pro";
            font-weight: 100;
            left: 0;
            position: absolute;
            top: 0;
            transform: translateX(-200%);
        }
    }
    h3:not([class]) {
        @extend .heading, .heading--2;
    }
    h4:not([class]) {
        @extend .heading, .heading--3;
    }
    h5:not([class]) {
        @extend .heading, .heading--4;
    }
}
.sectionTitle-heading {
    @extend .u-paddingBottom--tight;
    position: relative;

    &::after {
        border-bottom: $border--thick;
        border-color: $color--accent--magentaDarkened;
        content: "";
        position: absolute;
        left: 50%;
        top: 100%;
        transform: translateX(-50%);
        width: $heading--decorativeUnderlineWidth;
    }
}
.siteFooter.siteFooter {
    margin-top: $whiteSpace--xloose;
}
.siteHeader {
    align-items: center;
    display: flex;
    font-size: var(--fontSize--small);
    justify-content: space-between;
    margin-bottom: $whiteSpace--loose;
    padding: $whiteSpace--normal 0;
}
.siteHeader-nav {
    font-family: $fontFamily--display;
    font-weight: $fontWeight--display;
}
.siteHeader-menuItems {
    display: flex;
    column-gap: $whiteSpace--normal;
}
.siteHeader-menuItemButton {
    display: block;
    padding-bottom: $whiteSpace--xtight;

    &:focus,
    &:hover {
        color: $color--accent;
    }
    .siteHeader-menuItem--hasSubMenu & {
        align-items: center;
        column-gap: $whiteSpace--xtight;
        display: flex;
    }
}
.siteHeader-menuItem--hasSubMenu {
    position: relative;
}
.siteHeader-menuItem--isActive {
    color: $color--accent;
    position: relative;

    &::after {
        background-color: $color--accent;
        content: "";
        height: 2px;
        left: 0;
        position: absolute;
        right: 0;
        top: 100%;
    }
}
.siteHeader-subMenu {
    background-color: white;
    border-radius: $borderRadius--normal;
    box-shadow: $boxShadow--normal;
    left: calc(#{$whiteSpace--tight} * -1);
    min-width: 200px;
    opacity: 0;
    padding: $whiteSpace--xtight;
    pointer-events: none;
    position: absolute;
    top: 100%;
    transform: scale(0.8);
    transition: all 0.125s;
    transition-property: opacity, transform;
    white-space: nowrap;

    .siteHeader-menuItem--hasSubMenu:focus-within > &,
    .siteHeader-menuItem--hasSubMenu:hover > & {
        opacity: 1;
        pointer-events: all;
        transform: scale(1);
        transition-delay: 0.25s;
    }
}
.siteHeader-subMenuItemButton {
    display: block;
    padding: $whiteSpace--xtight $whiteSpace--tight;

    &:focus,
    &:hover {
        background-color: rgba($color--accent, 0.1);
        color: $color--accent;
    }
}
.tabbedNav {
    border-bottom: $border--hairline;
}
.tabbedNav-tabs {
    column-gap: $whiteSpace--loose;
    display: flex;
    font-family: $fontFamily--display;
    font-weight: $fontWeight--display;
}
.tabbedNav-tab {
}
.tabbedNav-tabButton {
    display: block;
    padding-bottom: $whiteSpace--tight;

    .tabbedNav-tab.is-active > & {
        border-bottom: $border--thick;
        border-color: $color--accent;
        color: $color--accent;
    }
}
@mixin increaseSpecificity {
    &#{&} {
        @content;
    }
}
$flexProperties: (
    'alignItems': align-items,
    'justifyContent': justify-content,
);
@each $flexPropertyName, $flexPropertyCSSName in $flexProperties {
    .u-#{$flexPropertyName}--flexStart {
        @include increaseSpecificity {
            #{$flexPropertyCSSName}: flex-start;
        }
    }
    .u-#{$flexPropertyName}--center {
        @include increaseSpecificity {
            #{$flexPropertyCSSName}: center;
        }
    }
    .u-#{$flexPropertyName}--stretch {
        @include increaseSpecificity {
            #{$flexPropertyCSSName}: stretch;
        }
    }
}
.u-alignItems--stretch {
    & > * {
        flex-grow: 1;
    }
}
@each $colorName, $colorCode in $colorPalette {
    .u-backgroundColor--#{$colorName} {
        @include increaseSpecificity() {
            background-color: $colorCode;
        }
    }
    .u-borderColor--#{$colorName} {
        @include increaseSpecificity() {
            border-color: $colorCode;
        }
    }
    .u-color--#{$colorName} {
        @include increaseSpecificity() {
            color: $colorCode;
        }
    }

    @each $variantName, $adjustmentPercentage in map-get($variants, "lightened") {
        $modifiedColor: rgba($colorCode, $adjustmentPercentage);

        .u-backgroundColor--#{$colorName}--#{$variantName} {
            @include increaseSpecificity() {
                background-color: $modifiedColor;
            }
        }
        .u-borderColor--#{$colorName}--#{$variantName} {
            @include increaseSpecificity() {
                border-color: $modifiedColor;
            }
        }
        .u-color--#{$colorName}--#{$variantName} {
            @include increaseSpecificity() {
                color: $modifiedColor;
            }
        }
    }
}
@each $borderRadiusName, $borderRadius in $borderRadii {
    .u-borderRadius--#{$borderRadiusName} {
        border-radius: $borderRadius;
    }
}
@each $borderStyleName, $borderStyle in $borderStyles {
    .u-border--#{$borderStyleName} {
        border: $borderStyle;
    }
    .u-borderBottom--#{$borderStyleName} {
        border-bottom: $borderStyle;
    }
    .u-borderLeft--#{$borderStyleName} {
        border-left: $borderStyle;
    }
    .u-borderRight--#{$borderStyleName} {
        border-right: $borderStyle;
    }
    .u-borderTop--#{$borderStyleName} {
        border-top: $borderStyle;
    }
    .u-borderX--#{$borderStyleName} {
        border-left: $borderStyle;
        border-right: $borderStyle;
    }
    .u-borderY--#{$borderStyleName} {
        border-bottom: $borderStyle;
        border-top: $borderStyle;
    }
}
@each $borderRadiusName, $borderRadius in $borderRadii {
    .u-borderRadius--#{$borderRadiusName} {
        border-radius: $borderRadius;
    }
}
@each $boxShadowStyleName, $boxShadowStyle in $boxShadowStyles {
    .u-boxShadow--#{$boxShadowStyleName} {
        box-shadow: $boxShadowStyle;
    }
}
.u-centered {
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
}
.u-columnGap,
.u-rowGap {
    display: flex;
}
.u-columnGap {
    flex-direction: row;
    align-items: center;
}
.u-rowGap {
    flex-direction: column;
}
[class*="u-columnGap--"] {
    @extend .u-columnGap;
}
[class*="u-rowGap--"] {
    @extend .u-rowGap;
}
@each $gridSizeName, $whiteSpaceValue in $gridSizes {
    .u-columnGap--#{$gridSizeName} {
        @include increaseSpecificity {
            column-gap: $whiteSpaceValue;
        }
    }
    .u-rowGap--#{$gridSizeName} {
        @include increaseSpecificity {
            row-gap: $whiteSpaceValue;
        }
    }
    .u-padding--#{$gridSizeName} {
        @include increaseSpecificity {
            padding: $whiteSpaceValue;
        }
    }
    .u-paddingBottom--#{$gridSizeName} {
        @include increaseSpecificity {
            padding-bottom: $whiteSpaceValue;
        }
    }
    .u-paddingTop--#{$gridSizeName} {
        @include increaseSpecificity {
            padding-top: $whiteSpaceValue;
        }
    }
    .u-paddingX--#{$gridSizeName} {
        @include increaseSpecificity {
            padding-left: $whiteSpaceValue;
            padding-right: $whiteSpaceValue;
        }
    }
    .u-paddingY--#{$gridSizeName} {
        @include increaseSpecificity {
            padding-bottom: $whiteSpaceValue;
            padding-top: $whiteSpaceValue;
        }
    }
    .u-margin--#{$gridSizeName} {
        @include increaseSpecificity {
            margin: $whiteSpaceValue;
        }
    }
    .u-marginBottom--#{$gridSizeName} {
        @include increaseSpecificity {
            margin-bottom: $whiteSpaceValue;
        }
    }
    .u-marginTop--#{$gridSizeName} {
        @include increaseSpecificity {
            margin-top: $whiteSpaceValue;
        }
    }
    .u-marginX--#{$gridSizeName} {
        @include increaseSpecificity {
            margin-left: $whiteSpaceValue;
            margin-right: $whiteSpaceValue;
        }
    }
    .u-marginY--#{$gridSizeName} {
        @include increaseSpecificity {
            margin-bottom: $whiteSpaceValue;
            margin-top: $whiteSpaceValue;
        }
    }
}
[class*="u-columns--"] {
    display: grid;
}
@for $i from 1 through 12 {
    .u-columns--#{$i} {
        grid-template-columns: repeat($i, 1fr);
    }
    .u-spanColumns--#{$i} {
        --num-columns: calc(12 / #{$i});
        --num-gutters: calc(var(--num-columns) - 1);
        --gutter-widths: calc(var(--num-gutters) * var(--gridUnit));
        --width-of-span: calc((100% - var(--gutter-widths)) / var(--num-columns));

        width: var(--width-of-span);
    }
}
.u-screenReadersOnly {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}
